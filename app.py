# Plan Financier Strat√©gique Familial - Application Streamlit
# Alix & William - Vers l'Ind√©pendance Financi√®re 2030

import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from datetime import datetime, timedelta
import json

# Configuration de la page
st.set_page_config(
    page_title="Plan Financier Strat√©gique Familial - Alix & William",
    page_icon="üí∞",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS personnalis√© pour l'interface
st.markdown("""
<style>
    .metric-card {
        background: linear-gradient(90deg, #4CAF50 0%, #45a049 100%);
        padding: 20px;
        border-radius: 10px;
        margin: 10px 0;
        color: white;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
    .warning-card {
        background: linear-gradient(90deg, #ff9800 0%, #f57c00 100%);
        padding: 20px;
        border-radius: 10px;
        margin: 10px 0;
        color: white;
    }
    .danger-card {
        background: linear-gradient(90deg, #f44336 0%, #d32f2f 100%);
        padding: 20px;
        border-radius: 10px;
        margin: 10px 0;
        color: white;
    }
    .mindset-box {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 20px;
        border-radius: 15px;
        margin: 20px 0;
        color: white;
        border-left: 5px solid #fff;
    }
    .mentor-advice {
        border-left: 4px solid #2196F3;
        padding: 15px;
        margin: 10px 0;
        background: #f8f9fa;
        border-radius: 0 10px 10px 0;
    }
    .phase-indicator {
        text-align: center;
        padding: 15px;
        border-radius: 10px;
        font-weight: bold;
        font-size: 18px;
        margin: 20px 0;
    }
    .stabilisation { background: #ffebee; color: #c62828; }
    .transition { background: #fff3e0; color: #f57c00; }
    .expansion { background: #e8f5e8; color: #2e7d32; }
    .baby-step {
        display: flex;
        align-items: center;
        padding: 10px;
        margin: 5px 0;
        border-radius: 8px;
        border-left: 4px solid #2196F3;
    }
    .completed { background: #e8f5e8; border-left-color: #4CAF50; }
    .current { background: #fff3e0; border-left-color: #ff9800; }
    .pending { background: #f5f5f5; border-left-color: #9e9e9e; }
</style>
""", unsafe_allow_html=True)

# Initialisation des donn√©es de session
if 'projects' not in st.session_state:
    st.session_state.projects = [
        {
            'nom': 'Titre foncier Mejeuh',
            'montant': 2815000,
            'type': 'Actif g√©n√©rateur',
            'statut': 'En cours',
            'roi_attendu': 12,
            'cash_flow_mensuel': 0,
            'categorie': 'Immobilier',
            'priorite': 'Haute',
            'echeance': '2025-06-30',
            'vocabulaire_kiyosaki': 'Acquisition d\'actif immobilier g√©n√©rant revenus passifs'
        },
        {
            'nom': 'Voyage enfants Suisse',
            'montant': 8189592,
            'type': 'Passif',
            'statut': 'Planifi√©',
            'roi_attendu': 0,
            'cash_flow_mensuel': -680000,
            'categorie': 'Famille',
            'priorite': 'Moyenne',
            'echeance': '2025-08-15',
            'vocabulaire_kiyosaki': 'Passif familial - Investissement capital social familial'
        },
        {
            'nom': 'Scolarit√© enfants',
            'montant': 6500000,
            'type': 'Investissement formation',
            'statut': 'En cours',
            'roi_attendu': 25,
            'cash_flow_mensuel': -542000,
            'categorie': '√âducation',
            'priorite': 'Critique',
            'echeance': '2025-12-31',
            'vocabulaire_kiyosaki': 'Investissement capital humain - Actif intellectuel long terme'
        },
        {
            'nom': 'Projet IIBA',
            'montant': 2786480,
            'type': 'Actif g√©n√©rateur',
            'statut': 'D√©veloppement',
            'roi_attendu': 18,
            'cash_flow_mensuel': 232000,
            'categorie': 'Business',
            'priorite': 'Haute',
            'echeance': '2025-12-31',
            'vocabulaire_kiyosaki': 'Syst√®me g√©n√©rateur revenus passifs - Quadrant B vers I'
        }
    ]

if 'kpis' not in st.session_state:
    st.session_state.kpis = {
        'cash_flow_mensuel': -2200000,
        'ratio_actifs_passifs': 11.3,
        'regle_50_30_20': {'besoins': 75, 'envies': 45, 'epargne': 5},
        'fonds_urgence_mois': 0,
        'revenus_passifs_pct': 18,
        'phase_actuelle': 'Stabilisation',
        'baby_step_actuel': 1,
        'revenus_mensuels': 1082000,
        'depenses_mensuelles': 3282000,
        'nombre_actifs': 2,
        'objectif_independance': 30,
        'quadrant_william': 'E',
        'quadrant_alix': 'S',
        'progression_william': 25,
        'progression_alix': 40
    }

if 'vision_2030' not in st.session_state:
    st.session_state.vision_2030 = {
        'objectif_principal': 'Toute la famille en Suisse avec ind√©pendance financi√®re',
        'milestones': {
            '2025': 'Stabilisation finances + finalisation actifs Cameroun',
            '2026': 'Transition - d√©veloppement revenus passifs',
            '2027': 'Expansion - multiplication actifs g√©n√©rateurs',
            '2028': 'Pr√©paration d√©m√©nagement famille',
            '2029': 'Installation progressive en Suisse',
            '2030': 'Ind√©pendance financi√®re compl√®te'
        },
        'projets_enfants': {
            'uriel': {'age_2030': 19, 'projet': 'Universit√© Suisse - Budget 200k CHF/an'},
            'naelle': {'age_2030': 12, 'projet': 'Coll√®ge international - Budget 50k CHF/an'},
            'nell_henri': {'age_2030': 10, 'projet': '√âcole primaire Suisse - Budget 30k CHF/an'}
        }
    }

# Fonctions utilitaires
def calculer_kpis():
    """Calcule les KPIs en temps r√©el bas√©s sur les projets"""
    projects = st.session_state.projects
    
    total_actifs = sum(p['montant'] for p in projects if p['type'] == 'Actif g√©n√©rateur')
    total_passifs = sum(p['montant'] for p in projects if p['type'] == 'Passif')
    total_formation = sum(p['montant'] for p in projects if p['type'] == 'Investissement formation')
    cash_flow_total = sum(p['cash_flow_mensuel'] for p in projects)
    
    # Mise √† jour des KPIs
    st.session_state.kpis['cash_flow_mensuel'] = cash_flow_total
    if (total_actifs + total_passifs) > 0:
        st.session_state.kpis['ratio_actifs_passifs'] = (total_actifs / (total_actifs + total_passifs)) * 100
    st.session_state.kpis['nombre_actifs'] = len([p for p in projects if p['type'] == 'Actif g√©n√©rateur'])
    
    # Calcul revenus passifs
    revenus_passifs = sum(p['cash_flow_mensuel'] for p in projects if p['cash_flow_mensuel'] > 0)
    if st.session_state.kpis['revenus_mensuels'] > 0:
        st.session_state.kpis['revenus_passifs_pct'] = (revenus_passifs / st.session_state.kpis['revenus_mensuels']) * 100
    
    # D√©termination de la phase
    if cash_flow_total < 0 and st.session_state.kpis['ratio_actifs_passifs'] < 20:
        st.session_state.kpis['phase_actuelle'] = 'Stabilisation'
    elif cash_flow_total >= 0 and st.session_state.kpis['ratio_actifs_passifs'] < 40:
        st.session_state.kpis['phase_actuelle'] = 'Transition'
    else:
        st.session_state.kpis['phase_actuelle'] = 'Expansion'

def get_mentor_advice(project_type, montant, nom_projet):
    """Retourne les conseils des 3 mentors selon le type de projet"""
    advice = {
        'kiyosaki': '',
        'buffett': '',
        'ramsey': ''
    }
    
    if project_type == 'Actif g√©n√©rateur':
        advice['kiyosaki'] = f"‚úÖ **Robert Kiyosaki**: Excellent choix! '{nom_projet}' est un v√©ritable actif qui met de l'argent dans votre poche. Concentrez-vous sur l'augmentation de votre colonne d'actifs. Vocabulaire correct: 'Acquisition d'actif g√©n√©rateur' au lieu de 'investissement'."
        advice['buffett'] = f"ü§î **Warren Buffett**: Comprenez-vous parfaitement ce business? Pouvez-vous expliquer comment '{nom_projet}' g√©n√®rera de la valeur dans 10 ans? Avez-vous un avantage concurrentiel durable?"
        advice['ramsey'] = f"üí∞ **Dave Ramsey**: Payez-vous comptant ou cr√©ez-vous de la dette pour '{nom_projet}'? Respectez vos baby steps: emergency fund d'abord, puis investissements."
    
    elif project_type == 'Passif':
        advice['kiyosaki'] = f"‚ö†Ô∏è **Robert Kiyosaki**: '{nom_projet}' est un passif qui sort {montant:,.0f} FCFA de votre poche. Pouvez-vous le transformer en actif ou le r√©duire? √âvitez d'acheter des passifs d√©guis√©s en actifs."
        advice['buffett'] = f"üéØ **Warren Buffett**: Le co√ªt d'opportunit√© de '{nom_projet}' ({montant:,.0f} FCFA) vaut-il le b√©n√©fice familial? Ces {montant:,.0f} FCFA investis √† 8% annuel vaudraient {montant*1.47:,.0f} FCFA dans 5 ans."
        advice['ramsey'] = f"üö® **Dave Ramsey**: '{nom_projet}' est-il un BESOIN ou une ENVIE? √Ä {montant:,.0f} FCFA, v√©rifiez que √ßa respecte votre budget 50/30/20. Pas de d√©penses 'envies' avant emergency fund complet."
    
    else:  # Investissement formation
        advice['kiyosaki'] = f"üìö **Robert Kiyosaki**: '{nom_projet}' est le meilleur investissement! Vous d√©veloppez votre capital humain. L'√©ducation est un actif que personne ne peut vous retirer. ROI estim√©: 25%/an."
        advice['buffett'] = f"üéì **Warren Buffett**: '{nom_projet}' a un ROI excellent sur 20+ ans. L'√©ducation cr√©e un avantage concurrentiel permanent. Investissement dans la 'zone de comp√©tence' future des enfants."
        advice['ramsey'] = f"üë®‚Äçüë©‚Äçüëß‚Äçüë¶ **Dave Ramsey**: L'√©ducation des enfants est prioritaire absolue, mais dans les limites du budget. {montant:,.0f} FCFA/an doit rester dans les 50% 'besoins' de votre budget."
    
    return advice

def get_baby_step_status():
    """D√©termine le Baby Step actuel selon Dave Ramsey"""
    kpis = st.session_state.kpis
    
    if kpis['fonds_urgence_mois'] < 1:
        return 1, "Cr√©er fonds d'urgence de 1 mois (1M FCFA)"
    elif kpis['cash_flow_mensuel'] < 0:
        return 2, "√âliminer toutes les dettes (sauf immobilier)"
    elif kpis['fonds_urgence_mois'] < 6:
        return 3, "Fonds d'urgence complet 3-6 mois"
    elif kpis['revenus_passifs_pct'] < 15:
        return 4, "Investir 15% revenus pour retraite"
    elif 'scolarite' not in [p['nom'].lower() for p in st.session_state.projects]:
        return 5, "√âpargne √©ducation enfants"
    elif kpis['phase_actuelle'] != 'Expansion':
        return 6, "Rembourser hypoth√®que anticip√©"
    else:
        return 7, "Construire richesse et donner"

def get_phase_recommendations():
    """Recommandations sp√©cifiques selon la phase actuelle"""
    phase = st.session_state.kpis['phase_actuelle']
    
    if phase == 'Stabilisation':
        return {
            'actions': [
                "Cr√©er fonds d'urgence 3 mois (3.3M FCFA)",
                "Appliquer r√®gle 50/30/20 strictement",
                "Finaliser titre foncier ‚Üí premier cash flow positif",
                "R√©duire voyage Suisse de 50% (√©conomie 4M FCFA)"
            ],
            'objectifs': [
                "Cash flow mensuel > -1M FCFA",
                "Ratio actifs/passifs > 20%",
                "Fonds urgence > 2 mois"
            ],
            'duree': "6-12 mois"
        }
    elif phase == 'Transition':
        return {
            'actions': [
                "D√©velopper IIBA pour 500k FCFA/mois passifs",
                "William: lancer side-business (200k/mois)",
                "Optimiser fiscalit√© Suisse-Cameroun",
                "Acqu√©rir 2√®me actif immobilier"
            ],
            'objectifs': [
                "Cash flow mensuel > 0 FCFA",
                "Ratio actifs/passifs > 40%",
                "Revenus passifs > 20%"
            ],
            'duree': "12-18 mois"
        }
    else:  # Expansion
        return {
            'actions': [
                "Multiplier actifs g√©n√©rateurs",
                "Diversifier: actions, crypto, business",
                "Pr√©parer migration famille vers Suisse",
                "Formation avanc√©e investissements"
            ],
            'objectifs': [
                "Revenus passifs > 50%",
                "Ind√©pendance financi√®re partielle",
                "Pr√©paration vision 2030"
            ],
            'duree': "18+ mois"
        }

# Interface principale
def main():
    # Calcul KPIs
    calculer_kpis()
    
    # Sidebar navigation
    st.sidebar.title("üè† Navigation Familiale")
    
    # Mindset reminders dans la sidebar
    st.sidebar.markdown("""
    <div class="mindset-box">
        <h3>üí° Changement Mindset</h3>
        <p><strong>William:</strong><br>
        ‚ùå "Je dois travailler plus pour financer"<br>
        ‚úÖ "Comment d√©velopper des revenus qui travaillent sans moi?"</p>
        
        <p><strong>Alix:</strong><br>
        ‚ùå "Comment g√©rer tous ces projets dans le budget?"<br>
        ‚úÖ "Quels actifs vais-je acqu√©rir ce trimestre?"</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Menu navigation
    page = st.sidebar.selectbox("Choisir une page", [
        "üìä Dashboard Principal",
        "üíº Gestion Projets", 
        "üéØ Conseils 3 Mentors",
        "üìà KPIs & Analytics",
        "üöÄ Progression Familiale",
        "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ √âducation Enfants",
        "üîÆ Vision 2030"
    ])
    
    # Affichage des pages
    if page == "üìä Dashboard Principal":
        show_dashboard()
    elif page == "üíº Gestion Projets":
        show_project_management()
    elif page == "üéØ Conseils 3 Mentors":
        show_mentor_advice()
    elif page == "üìà KPIs & Analytics":
        show_analytics()
    elif page == "üöÄ Progression Familiale":
        show_progression()
    elif page == "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ √âducation Enfants":
        show_children_education()
    elif page == "üîÆ Vision 2030":
        show_vision_2030()

def show_dashboard():
    st.title("üìä Dashboard Financier Familial")
    st.markdown("**Vision:** Ind√©pendance financi√®re et migration en Suisse d'ici 2030")
    
    # M√©triques principales
    col1, col2, col3, col4 = st.columns(4)
    
    kpis = st.session_state.kpis
    
    with col1:
        cash_flow = kpis['cash_flow_mensuel']
        color = "normal" if cash_flow >= 0 else "inverse"
        st.metric(
            "Cash Flow Mensuel", 
            f"{cash_flow:,.0f} FCFA", 
            delta=f"Objectif: +500k FCFA",
            delta_color=color
        )
    
    with col2:
        ratio = kpis['ratio_actifs_passifs']
        st.metric(
            "Ratio Actifs/Passifs", 
            f"{ratio:.1f}%", 
            delta="Objectif: >40%",
            delta_color="normal" if ratio > 20 else "inverse"
        )
    
    with col3:
        passifs_pct = kpis['revenus_passifs_pct']
        st.metric(
            "Revenus Passifs", 
            f"{passifs_pct:.1f}%", 
            delta="Objectif: 30%",
            delta_color="normal" if passifs_pct > 15 else "inverse"
        )
    
    with col4:
        baby_step, description = get_baby_step_status()
        st.metric(
            "Baby Step Dave Ramsey", 
            f"√âtape {baby_step}/7", 
            delta=description
        )
    
    # Phase actuelle
    phase = kpis['phase_actuelle']
    phase_class = phase.lower()
    
    st.markdown(f"""
    <div class="phase-indicator {phase_class}">
        üéØ PHASE ACTUELLE: {phase.upper()}
    </div>
    """, unsafe_allow_html=True)
    
    # Graphiques
    col1, col2 = st.columns(2)
    
    with col1:
        # Graphique Cash Flow
        months = ['Jan', 'F√©v', 'Mar', 'Avr', 'Mai', 'Juin', 'Juil', 'Ao√ªt', 'Sep', 'Oct', 'Nov', 'D√©c']
        cash_flows = [-2200000, -1800000, -1400000, -1000000, -600000, -200000, 200000, 600000, 1000000, 1400000, 1800000, 2200000]
        
        fig = px.line(
            x=months, y=cash_flows,
            title="Projection Cash Flow 2025",
            labels={'x': 'Mois', 'y': 'Cash Flow (FCFA)'}
        )
        fig.add_hline(y=0, line_dash="dash", line_color="red", annotation_text="Seuil √âquilibre")
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        # R√©partition Actifs/Passifs
        projects = st.session_state.projects
        actifs = sum(p['montant'] for p in projects if p['type'] == 'Actif g√©n√©rateur')
        passifs = sum(p['montant'] for p in projects if p['type'] == 'Passif')
        formation = sum(p['montant'] for p in projects if p['type'] == 'Investissement formation')
        
        fig = px.pie(
            values=[actifs, passifs, formation],
            names=['Actifs G√©n√©rateurs', 'Passifs', 'Formation'],
            title="R√©partition Investissements",
            color_discrete_sequence=['#4CAF50', '#f44336', '#2196F3']
        )
        st.plotly_chart(fig, use_container_width=True)
    
    # R√®gle 50/30/20
    st.subheader("üìã R√®gle 50/30/20 - Dave Ramsey")
    
    col1, col2, col3 = st.columns(3)
    
    besoins = kpis['regle_50_30_20']['besoins']
    envies = kpis['regle_50_30_20']['envies'] 
    epargne = kpis['regle_50_30_20']['epargne']
    
    with col1:
        st.metric("Besoins (50%)", f"{besoins}%", delta=f"{50-besoins:+.0f}%" if besoins != 50 else None)
        st.progress(min(besoins/50, 1.0))
    
    with col2:
        st.metric("Envies (30%)", f"{envies}%", delta=f"{30-envies:+.0f}%" if envies != 30 else None)
        st.progress(min(envies/30, 1.0))
    
    with col3:
        st.metric("√âpargne (20%)", f"{epargne}%", delta=f"{20-epargne:+.0f}%" if epargne != 20 else None)
        st.progress(min(epargne/20, 1.0))

def show_project_management():
    st.title("üíº Gestion Intelligente des Projets")
    
    # Formulaire d'ajout de projet
    with st.expander("‚ûï Ajouter un Nouveau Projet"):
        with st.form("nouveau_projet"):
            col1, col2 = st.columns(2)
            
            with col1:
                nom = st.text_input("Nom du projet")
                montant = st.number_input("Montant (FCFA)", min_value=0, step=10000)
                type_projet = st.selectbox("Type selon Kiyosaki", [
                    "Actif g√©n√©rateur", "Passif", "Investissement formation"
                ])
                categorie = st.selectbox("Cat√©gorie", [
                    "Immobilier", "Business", "√âducation", "Famille", "Sant√©", "Transport", "Autre"
                ])
            
            with col2:
                statut = st.selectbox("Statut", [
                    "Pas d√©marr√©", "En cours", "Termin√©", "En pause", "Annul√©"
                ])
                priorite = st.selectbox("Priorit√©", ["Critique", "Haute", "Moyenne", "Basse"])
                roi_attendu = st.number_input("ROI attendu (%)", min_value=0.0, max_value=100.0, step=0.5)
                cash_flow = st.number_input("Cash Flow mensuel (FCFA)", step=1000)
                echeance = st.date_input("√âch√©ance")
            
            if st.form_submit_button("Ajouter le Projet"):
                vocabulaire_kiyosaki = {
                    "Actif g√©n√©rateur": "Syst√®me g√©n√©rateur revenus passifs",
                    "Passif": "Sortie de tr√©sorerie - √âvaluer transformation en actif",
                    "Investissement formation": "Investissement capital humain long terme"
                }
                
                nouveau_projet = {
                    'nom': nom,
                    'montant': montant,
                    'type': type_projet,
                    'statut': statut,
                    'roi_attendu': roi_attendu,
                    'cash_flow_mensuel': cash_flow,
                    'categorie': categorie,
                    'priorite': priorite,
                    'echeance': echeance.strftime('%Y-%m-%d'),
                    'vocabulaire_kiyosaki': vocabulaire_kiyosaki[type_projet]
                }
                
                st.session_state.projects.append(nouveau_projet)
                st.success(f"Projet '{nom}' ajout√© avec succ√®s!")
                st.experimental_rerun()
    
    # Filtres
    col1, col2, col3 = st.columns(3)
    
    with col1:
        filtre_type = st.multiselect("Filtrer par type", 
            ["Actif g√©n√©rateur", "Passif", "Investissement formation"],
            default=["Actif g√©n√©rateur", "Passif", "Investissement formation"]
        )
    
    with col2:
        filtre_statut = st.multiselect("Filtrer par statut",
            ["Pas d√©marr√©", "En cours", "Termin√©", "En pause"],
            default=["Pas d√©marr√©", "En cours"]
        )
    
    with col3:
        filtre_priorite = st.multiselect("Filtrer par priorit√©",
            ["Critique", "Haute", "Moyenne", "Basse"],
            default=["Critique", "Haute", "Moyenne", "Basse"]
        )
    
    # Affichage des projets filtr√©s
    projects_filtered = [
        p for p in st.session_state.projects 
        if p['type'] in filtre_type 
        and p['statut'] in filtre_statut 
        and p['priorite'] in filtre_priorite
    ]
    
    st.subheader(f"üìã Projets Familiaux ({len(projects_filtered)} projets)")
    
    for i, project in enumerate(projects_filtered):
        # Couleur selon le type
        if project['type'] == 'Actif g√©n√©rateur':
            couleur = "metric-card"
        elif project['type'] == 'Passif':
            couleur = "danger-card"
        else:
            couleur = "warning-card"
        
        with st.container():
            st.markdown(f"""
            <div class="{couleur}">
                <h4>üéØ {project['nom']}</h4>
                <p><strong>Montant:</strong> {project['montant']:,.0f} FCFA | 
                <strong>Cash Flow:</strong> {project['cash_flow_mensuel']:,.0f} FCFA/mois | 
                <strong>ROI:</strong> {project['roi_attendu']}%</p>
                <p><strong>Vocabulaire Kiyosaki:</strong> {project['vocabulaire_kiyosaki']}</p>
                <p><strong>Statut:</strong> {project['statut']} | 
                <strong>Priorit√©:</strong> {project['priorite']} | 
                <strong>√âch√©ance:</strong> {project['echeance']}</p>
            </div>
            """, unsafe_allow_html=True)
            
            # Conseils des mentors pour ce projet
            if st.button(f"üìù Conseils Mentors", key=f"advice_{i}"):
                advice = get_mentor_advice(project['type'], project['montant'], project['nom'])
                
                st.markdown(f"""
                <div class="mentor-advice">
                    {advice['kiyosaki']}
                </div>
                <div class="mentor-advice">
                    {advice['buffett']}
                </div>
                <div class="mentor-advice">
                    {advice['ramsey']}
                </div>
                """, unsafe_allow_html=True)

def show_mentor_advice():
    st.title("üéØ Conseil des 3 Mentors Financiers")
    
    # S√©lection d'un projet pour conseil sp√©cifique
    project_names = [p['nom'] for p in st.session_state.projects]
    selected_project = st.selectbox("Choisir un projet pour conseil d√©taill√©", project_names)
    
    if selected_project:
        project = next(p for p in st.session_state.projects if p['nom'] == selected_project)
        
        st.subheader(f"Conseil pour: {project['nom']}")
        
        advice = get_mentor_advice(project['type'], project['montant'], project['nom'])
        
        # Robert Kiyosaki
        st.markdown("""
        ### üè¢ Robert Kiyosaki - "P√®re Riche, P√®re Pauvre"
        **Focus: Quadrants du Cash Flow (E-S-B-I)**
        """)
        st.info(advice['kiyosaki'])
        
        # Warren Buffett  
        st.markdown("""
        ### üíé Warren Buffett - "L'Oracle d'Omaha"
        **Focus: Valeur Long Terme & Compr√©hension**
        """)
        st.info(advice['buffett'])
        
        # Dave Ramsey
        st.markdown("""
        ### üí™ Dave Ramsey - "Total Money Makeover"
        **Focus: Discipline & Baby Steps**
        """)
        st.info(advice['ramsey'])
        
        # Synth√®se consensus
        st.markdown("""
        ### ü§ù Synth√®se Consensus des 3 Mentors
        """)
        
        if project['type'] == 'Actif g√©n√©rateur':
            st.success("""
            ‚úÖ **ACCORD UNANIME**: Ce projet est excellent pour votre ind√©pendance financi√®re.
            - **Kiyosaki**: D√©veloppe vos revenus passifs
            - **Buffett**: Investissement long terme compr√©hensible  
            - **Ramsey**: Si financ√© sans dette excessive
            
            **Action recommand√©e**: Poursuivre le projet en respectant votre budget.
            """)
        
        elif project['type'] == 'Passif':
            st.warning("""
            ‚ö†Ô∏è **ATTENTION REQUISE**: Les 3 mentors recommandent la prudence.
            - **Kiyosaki**: Questionner si c'est vraiment n√©cessaire
            - **Buffett**: Analyser le co√ªt d'opportunit√©
            - **Ramsey**: V√©rifier que c'est dans votre budget 50/30/20
            
            **Action recommand√©e**: R√©duire ou reporter si possible.
            """)
        
        else:  # Formation
            st.info("""
            üìö **INVESTISSEMENT APPROUV√â**: Tous soutiennent l'√©ducation.
            - **Kiyosaki**: Meilleur ROI pour le capital humain
            - **Buffett**: Avantage concurrentiel permanent
            - **Ramsey**: Priorit√© familiale dans budget √©quilibr√©
            
            **Action recommand√©e**: Maintenir l'investissement √©ducatif.
            """)

def show_analytics():
    st.title("üìà Analytics & KPIs Avanc√©s")
    
    # Graphiques avanc√©s
    col1, col2 = st.columns(2)
    
    with col1:
        # √âvolution projet√©e vers ind√©pendance financi√®re
        years = [2025, 2026, 2027, 2028, 2029, 2030]
        independence_progress = [5, 15, 30, 50, 75, 100]
        
        fig = px.line(
            x=years, y=independence_progress,
            title="Projection Ind√©pendance Financi√®re",
            labels={'x': 'Ann√©e', 'y': 'Ind√©pendance (%)'}
        )
        fig.add_hline(y=50, line_dash="dash", annotation_text="Seuil Libert√© Partielle")
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        # Quadrants familiaux
        family_members = ['William', 'Alix']
        current_quadrant = ['E', 'S'] 
        target_quadrant = ['B', 'I']
        progression = [25, 40]
        
        fig = go.Figure()
        fig.add_trace(go.Scatter(
            x=['E', 'S', 'B', 'I'], 
            y=[1, 1, 2, 2],
            mode='markers+text',
            marker=dict(size=100, color=['red', 'orange', 'lightblue', 'green']),
            text=['Employee<br>William', 'Self-Employed<br>Alix', 'Business Owner<br>Objectif Will', 'Investor<br>Objectif Alix'],
            textposition="middle center",
            name="Quadrants"
        ))
        fig.update_layout(title="Quadrants Familiaux - Position Actuelle vs Objectif")
        st.plotly_chart(fig, use_container_width=True)
    
    # Table d√©taill√©e des KPIs
    st.subheader("üìä Tableau de Bord KPIs D√©taill√©")
    
    kpi_data = {
        'KPI': [
            'Cash Flow Mensuel',
            'Ratio Actifs/Passifs', 
            'Revenus Passifs %',
            'Fonds d\'Urgence (mois)',
            'Nombre Actifs G√©n√©rateurs',
            'Phase Progression',
            'Baby Step Dave Ramsey'
        ],
        'Valeur Actuelle': [
            f"{st.session_state.kpis['cash_flow_mensuel']:,.0f} FCFA",
            f"{st.session_state.kpis['ratio_actifs_passifs']:.1f}%",
            f"{st.session_state.kpis['revenus_passifs_pct']:.1f}%",
            f"{st.session_state.kpis['fonds_urgence_mois']} mois",
            f"{st.session_state.kpis['nombre_actifs']} actifs",
            st.session_state.kpis['phase_actuelle'],
            f"{st.session_state.kpis['baby_step_actuel']}/7"
        ],
        'Objectif 2026': [
            '+500k FCFA',
            '40%',
            '30%', 
            '6 mois',
            '5 actifs',
            'Transition',
            '4-5/7'
        ],
        'Statut': [
            'üî¥' if st.session_state.kpis['cash_flow_mensuel'] < 0 else 'üü¢',
            'üî¥' if st.session_state.kpis['ratio_actifs_passifs'] < 20 else ('üü°' if st.session_state.kpis['ratio_actifs_passifs'] < 40 else 'üü¢'),
            'üî¥' if st.session_state.kpis['revenus_passifs_pct'] < 15 else ('üü°' if st.session_state.kpis['revenus_passifs_pct'] < 30 else 'üü¢'),
            'üî¥' if st.session_state.kpis['fonds_urgence_mois'] < 3 else 'üü¢',
            'üî¥' if st.session_state.kpis['nombre_actifs'] < 3 else 'üü¢',
            'üî¥' if st.session_state.kpis['phase_actuelle'] == 'Stabilisation' else ('üü°' if st.session_state.kpis['phase_actuelle'] == 'Transition' else 'üü¢'),
            'üî¥' if st.session_state.kpis['baby_step_actuel'] < 3 else ('üü°' if st.session_state.kpis['baby_step_actuel'] < 5 else 'üü¢')
        ]
    }
    
    df_kpis = pd.DataFrame(kpi_data)
    st.dataframe(df_kpis, use_container_width=True)

def show_progression():
    st.title("üöÄ Progression Familiale vers l'Ind√©pendance")
    
    # Baby Steps Dave Ramsey
    st.subheader("üë∂ Baby Steps Dave Ramsey - Progression")
    
    baby_steps = [
        "Fonds d'urgence starter 1 000$ (665k FCFA)",
        "√âliminer toutes dettes (sauf immobilier)",  
        "Fonds d'urgence complet 3-6 mois",
        "Investir 15% revenus pour retraite",
        "√âpargne universit√© enfants",
        "Rembourser hypoth√®que anticip√©",
        "Construire richesse et donner"
    ]
    
    current_step = st.session_state.kpis['baby_step_actuel']
    
    for i, step in enumerate(baby_steps, 1):
        if i < current_step:
            status = "completed"
            icon = "‚úÖ"
        elif i == current_step:
            status = "current"  
            icon = "üîÑ"
        else:
            status = "pending"
            icon = "‚è≥"
            
        st.markdown(f"""
        <div class="baby-step {status}">
            <h4>{icon} √âtape {i}: {step}</h4>
        </div>
        """, unsafe_allow_html=True)
    
    # Progression phases
    st.subheader("üìà Phases vers l'Ind√©pendance Financi√®re")
    
    phases_info = get_phase_recommendations()
    current_phase = st.session_state.kpis['phase_actuelle']
    
    col1, col2, col3 = st.columns(3)
    
    phases = [
        ('Stabilisation', 'stabilisation', col1),
        ('Transition', 'transition', col2), 
        ('Expansion', 'expansion', col3)
    ]
    
    for phase_name, phase_class, col in phases:
        with col:
            is_current = (current_phase == phase_name)
            border = "border: 3px solid #2196F3;" if is_current else ""
            
            st.markdown(f"""
            <div class="phase-indicator {phase_class}" style="{border}">
                {'üéØ PHASE ACTUELLE' if is_current else phase_name.upper()}
            </div>
            """, unsafe_allow_html=True)
            
            if is_current:
                st.markdown("**Actions prioritaires:**")
                for action in phases_info['actions']:
                    st.write(f"‚Ä¢ {action}")
                
                st.markdown("**Objectifs:**")
                for objectif in phases_info['objectifs']:
                    st.write(f"‚Ä¢ {objectif}")
                
                st.info(f"**Dur√©e estim√©e:** {phases_info['duree']}")

def show_children_education():
    st.title("üë®‚Äçüë©‚Äçüëß‚Äçüë¶ √âducation Financi√®re des Enfants")
    
    enfants = [
        {
            'nom': 'Uriel',
            'age': 14,
            'niveau': 'Adolescent - Concepts avanc√©s',
            'concepts': [
                'Diff√©rence Actifs vs Passifs avec exemples concrets',
                'Simulation jeu Cashflow de Kiyosaki adapt√©',
                'Compr√©hension quadrants familiaux et choix orientation',
                'Premi√®re approche investissements (√©pargne, actions)',
                'Budget personnel et gestion argent de poche'
            ],
            'objectifs_2025': [
                'Cr√©er son premier "actif" (vente cr√©ations artistiques)',
                'Comprendre le business model de ses parents',
                'Participer aux d√©cisions financi√®res familiales simples'
            ]
        },
        {
            'nom': 'Naelle', 
            'age': 7,
            'niveau': 'Enfant - Concepts fondamentaux',
            'concepts': [
                'Distinction √©pargne vs d√©pense avec exemples visuels',
                'Notion "argent qui travaille" (ex: tirelire qui grossit)',
                'Identifier les "actifs" dans son environnement',
                'Valeur de l\'effort pour gagner de l\'argent',
                'Premiers choix: acheter maintenant ou attendre'
            ],
            'objectifs_2025': [
                'Avoir sa tirelire et comprendre pourquoi √©pargner',
                'Faire ses premiers "investissements" (livres, mat√©riel scolaire)',
                'Aider aux d√©cisions d\'achat familiales simples'
            ]
        },
        {
            'nom': 'Nell-Henri',
            'age': 5,  
            'niveau': 'Petit enfant - Concepts tr√®s simples',
            'concepts': [
                'Valeur de l\'argent avec jeux √©ducatifs simples',
                'Concept "garder vs d√©penser" avec exemples visuels',
                'Premi√®re approche "sous qui rapportent des sous"',
                'Distinguer besoins vs envies avec objets familiers',
                'Notion d\'√©change et de valeur'
            ],
            'objectifs_2025': [
                'Comprendre qu\'il faut travailler pour avoir de l\'argent',
                'Savoir compter et reconna√Ætre la monnaie',
                'Premiers choix simples d\'√©pargne'
            ]
        }
    ]
    
    for enfant in enfants:
        st.subheader(f"üßí {enfant['nom']} ({enfant['age']} ans)")
        st.write(f"**Niveau:** {enfant['niveau']}")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("**üéì Concepts √† enseigner:**")
            for concept in enfant['concepts']:
                st.write(f"‚Ä¢ {concept}")
        
        with col2:
            st.markdown("**üéØ Objectifs 2025:**")
            for objectif in enfant['objectifs_2025']:
                st.write(f"‚Ä¢ {objectif}")
        
        # Activit√©s recommand√©es
        st.markdown("**üéÆ Activit√©s recommand√©es:**")
        
        if enfant['nom'] == 'Uriel':
            st.info("""
            - Jeu de soci√©t√© Cashflow for Kids de Kiyosaki
            - Simulation investissement avec argent virtuel
            - Cr√©ation d'un petit business (art, tutorat)
            - Participation aux discussions financi√®res familiales
            - Lecture: "P√®re Riche P√®re Pauvre pour les jeunes"
            """)
        
        elif enfant['nom'] == 'Naelle':
            st.info("""
            - Jeux de comptage et reconnaissance monnaie
            - Tirelire transparente pour voir l'argent grandir  
            - Sorties shopping √©ducatives (comparer prix)
            - Histoires et livres sur l'argent pour enfants
            - R√©compenses pour √©pargne et bons choix
            """)
        
        else:  # Nell-Henri
            st.info("""
            - Jeux de r√¥le "magasin" et "banque"
            - Comptines et chansons sur l'argent
            - Images et dessins pour expliquer √©pargne
            - R√©compenses visuelles pour attendre/√©pargner
            - Participation aux courses (porter, choisir)
            """)
        
        st.markdown("---")
    
    # Planning √©ducation familiale
    st.subheader("üìÖ Planning √âducation Financi√®re Familiale 2025")
    
    planning = {
        'Janvier': 'Lancement tirelires individuelles + objectifs √©pargne',
        'F√©vrier': 'Premi√®re le√ßon Actifs vs Passifs avec objets maison', 
        'Mars': 'Jeu famille: "Construire notre empire financier"',
        'Avril': 'Visite banque + explication comptes √©pargne',
        'Mai': 'Uriel: Premier business plan (exposition art)',
        'Juin': 'Bilan mi-ann√©e + r√©compenses progression',
        'Juillet': 'Vacances: jeux financiers √©ducatifs',
        'Ao√ªt': 'Pr√©paration rentr√©e: budget fournitures scolaires',
        'Septembre': 'R√©vision concepts + nouveaux objectifs',
        'Octobre': 'Participation enfants aux d√©cisions famille',
        'Novembre': 'Pr√©paration budget cadeaux No√´l',
        'D√©cembre': 'Bilan annuel + c√©l√©bration r√©ussites'
    }
    
    for mois, activite in planning.items():
        st.write(f"**{mois}:** {activite}")

def show_vision_2030():
    st.title("üîÆ Vision Familiale 2030")
    st.subheader("üá®üá≠ Objectif: Toute la famille en Suisse avec ind√©pendance financi√®re")
    
    # Timeline 2025-2030
    st.markdown("### üìÖ Roadmap Strat√©gique 2025-2030")
    
    milestones = st.session_state.vision_2030['milestones']
    
    for year, milestone in milestones.items():
        progress = ((int(year) - 2025) / 5) * 100
        
        if year == '2025':
            color = "üî¥"
            status = "EN COURS"
        elif year in ['2026', '2027']:
            color = "üü°"
            status = "PLANIFI√â"
        else:
            color = "üü¢"
            status = "OBJECTIF"
            
        st.markdown(f"""
        <div style="padding: 15px; margin: 10px 0; border-left: 4px solid #2196F3; background: #f8f9fa; border-radius: 0 10px 10px 0;">
            <h4>{color} {year} - {status}</h4>
            <p>{milestone}</p>
            <div style="background: #e0e0e0; border-radius: 10px; height: 20px;">
                <div style="background: linear-gradient(90deg, #4CAF50, #45a049); width: {progress}%; height: 100%; border-radius: 10px; transition: width 0.3s;"></div>
            </div>
        </div>
        """, unsafe_allow_html=True)
    
    # Projets enfants sp√©cifiques 2030
    st.markdown("### üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Projets Enfants - Situation 2030")
    
    projets_enfants = st.session_state.vision_2030['projets_enfants']
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("#### üéì Uriel (19 ans)")
        st.write(f"**√Çge en 2030:** {projets_enfants['uriel']['age_2030']} ans")
        st.write(f"**Situation:** {projets_enfants['uriel']['projet']}")
        st.info("""
        **Pr√©paration requise:**
        - Dossier universit√© suisse (2027-2028)
        - Ma√Ætrise fran√ßais/allemand
        - Portfolio artistique international
        - Budget: 200k CHF/an (133M FCFA/an)
        """)
    
    with col2:
        st.markdown("#### üìö Naelle (12 ans)")  
        st.write(f"**√Çge en 2030:** {projets_enfants['naelle']['age_2030']} ans")
        st.write(f"**Situation:** {projets_enfants['naelle']['projet']}")
        st.info("""
        **Pr√©paration requise:**
        - Int√©gration syst√®me scolaire suisse (2028)
        - Apprentissage allemand pr√©coce
        - Adaptation sociale et culturelle
        - Budget: 50k CHF/an (33M FCFA/an)
        """)
    
    with col3:
        st.markdown("#### üè´ Nell-Henri (10 ans)")
        st.write(f"**√Çge en 2030:** {projets_enfants['nell_henri']['age_2030']} ans")
        st.write(f"**Situation:** {projets_enfants['nell_henri']['projet']}")  
        st.info("""
        **Pr√©paration requise:**
        - Int√©gration √©cole primaire suisse (2029)
        - Bilinguisme fran√ßais-allemand
        - Adaptation plus facile (plus jeune)
        - Budget: 30k CHF/an (20M FCFA/an)
        """)
    
    # Calculs financiers 2030
    st.markdown("### üí∞ Exigences Financi√®res 2030")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("#### üìä Co√ªts Annuels Suisse (2030)")
        
        cout_enfants_2030 = 200000 + 50000 + 30000  # CHF
        cout_famille_2030 = 150000  # CHF logement + vie
        cout_total_chf = cout_enfants_2030 + cout_famille_2030
        cout_total_fcfa = cout_total_chf * 665  # Taux approximatif
        
        st.metric("√âducation enfants", f"{cout_enfants_2030:,} CHF/an")
        st.metric("Vie familiale", f"{cout_famille_2030:,} CHF/an") 
        st.metric("TOTAL REQUIS", f"{cout_total_chf:,} CHF/an")
        st.metric("√âquivalent FCFA", f"{cout_total_fcfa:,.0f} FCFA/an")
    
    with col2:
        st.markdown("#### üéØ Revenus Passifs Requis")
        
        revenus_passifs_requis = cout_total_fcfa * 1.3  # Marge s√©curit√© 30%
        revenus_passifs_mensuels = revenus_passifs_requis / 12
        
        st.metric("Revenus passifs requis", f"{revenus_passifs_requis:,.0f} FCFA/an")
        st.metric("Soit par mois", f"{revenus_passifs_mensuels:,.0f} FCFA/mois")
        
        # Comparaison avec situation actuelle
        revenus_actuels = st.session_state.kpis['revenus_mensuels'] * st.session_state.kpis['revenus_passifs_pct'] / 100
        gap = revenus_passifs_mensuels - revenus_actuels
        
        st.metric("Gap √† combler", f"{gap:,.0f} FCFA/mois", delta=f"Actuels: {revenus_actuels:,.0f}")
    
    # Plan d'action 2025-2030
    st.markdown("### üöÄ Plan d'Action Strat√©gique")
    
    plan_action = {
        '2025-2026': [
            'Finaliser tous actifs immobiliers Cameroun',
            'D√©velopper IIBA ‚Üí 1M FCFA/mois revenus passifs',  
            'William: cr√©er side-business ‚Üí 500k FCFA/mois',
            'Constituer fonds migration 50M FCFA'
        ],
        '2026-2027': [
            'Multiplier actifs: 2√®me immeuble + diversification',
            'Optimiser fiscalit√© internationale',
            'Pr√©paration administrative migration',
            'Objectif: 3M FCFA/mois revenus passifs'
        ],
        '2027-2028': [
            'Vente s√©lective actifs Cameroun',
            'Acquisition actifs Suisse/Europe',
            'Dossiers universit√© Uriel',
            'Objectif: 5M FCFA/mois revenus passifs'
        ],
        '2028-2029': [
            'Migration progressive famille',
            'Installation infrastructure Suisse', 
            'Uriel ‚Üí Universit√© suisse',
            'Objectif: 8M FCFA/mois revenus passifs'
        ],
        '2029-2030': [
            'Ind√©pendance financi√®re compl√®te',
            'Famille stabilis√©e en Suisse',
            'Objectif: 12M+ FCFA/mois revenus passifs',
            'D√©but transmission patrimoine enfants'
        ]
    }
    
    for periode, actions in plan_action.items():
        st.markdown(f"#### üìÖ {periode}")
        for action in actions:
            st.write(f"‚Ä¢ {action}")
    
    # Indicateurs de succ√®s
    st.markdown("### üìà Indicateurs de Succ√®s Vision 2030")
    
    success_metrics = {
        'Financier': [
            '12M+ FCFA/mois revenus passifs',
            'Patrimoine net 2+ milliards FCFA', 
            'Ind√©pendance financi√®re compl√®te',
            'Fonds √©ducation enfants s√©curis√©'
        ],
        'Familial': [
            'Famille unie et stabilis√©e en Suisse',
            'Enfants int√©gr√©s syst√®me √©ducatif',
            'Ma√Ætrise langues locales',
            'R√©seau social et professionnel √©tabli'
        ],
        '√âducatif': [
            'Uriel: dipl√¥me universitaire suisse',
            'Naelle: excellence scolaire adapt√©e',
            'Nell-Henri: int√©gration r√©ussie',
            'Tous: √©ducation financi√®re solide'
        ],
        'Personnel': [
            'William: transition E‚ÜíB r√©ussie',
            'Alix: expertise investissements',
            'Sant√© familiale optimale', 
            '√âpanouissement personnel de tous'
        ]
    }
    
    col1, col2 = st.columns(2)
    
    with col1:
        for category, metrics in list(success_metrics.items())[:2]:
            st.markdown(f"#### {category}")
            for metric in metrics:
                st.write(f"‚úÖ {metric}")
    
    with col2:
        for category, metrics in list(success_metrics.items())[2:]:
            st.markdown(f"#### {category}")
            for metric in metrics:
                st.write(f"‚úÖ {metric}")

# Lancement de l'application
if __name__ == "__main__":
    main()
